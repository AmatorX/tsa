"""
Django settings for tsa project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from os import getenv
from pathlib import Path
from celery.schedules import crontab
import logging.config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# DATABASE_DIR = BASE_DIR / 'database'
# DATABASE_DIR.mkdir(exist_ok=True)
STATIC_ROOT = BASE_DIR / 'static'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-qsy=+!tmhg5$*lh(!l*bet7kzx#*)p5+3@r_^9m^@o@0b2h7y7'
SECRET_KEY = getenv('DJANGO_SECRET_KEY',
                    'django-insecure-qsy=+!tmhg5$*lh(!l*bet7kzx#*)p5+3@r_^9m^@o@0b2h7y7')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = getenv('DJANGO_DEBUG', "0") == "1"
# print(f'DEBUG: {DEBUG}')
DEBUG = True
# DEBUG = False

ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS = ['45.159.211.43', '147.45.72.56', '174.90.223.244', '104.157.67.53']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tsa_app.apps.TsaAppConfig',
    # 'django_admin_listfilter_dropdown',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tsa.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tsa.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite',
        # 'NAME': DATABASE_DIR / 'db.sqlite',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Edmonton'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
# STATIC_ROOT = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# LOGLEVEL = getenv("DJANGO_LOG_LEVEL", "info").upper()
# logging.config.dictConfig({
#     "version": 1,
#     "disable_existing_loggers": False,
#     "formatters": {
#         "console": {
#             "format": "%(ascitime)s %(levelname) [%(name)s: %(linea)s] %(module)s %(message)s"
#         },
#     },
#     "handlers": {
#         "console": {
#             "class": "logging.StreamHandler",
#             "formatter": "console"
#         },
#     },
#     "loggers": {
#         "": {
#             "level": LOGLEVEL,
#             "handlers": [
#                 "console",
#             ],
#         },
#     },
# })
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Используйте Redis или другого брокера
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'


# ВАЖНО !!!! Первые две задачи на проверку существования таблиц, должны запускаться в 0:01
# Иначе если запускать их перед обновлением KPI, то утром 1-го данных не будет записано,
# так как таблицы для записи данных будут созданы вечером
#
# Разделить проверку наличия таблиц в Object KPI и обновление данных KPI
#
#

CELERY_BEAT_SCHEDULE = {
    'check_and_create_tables_results_and_photos': {
        'task': 'tsa_app.tasks.check_and_create_tables_results_and_photos',
        'schedule': crontab(hour='13', minute='45'),  # Каждый день в 19:45
    },
    'check-and-create-tables-every-night': {
        'task': 'tsa_app.tasks.check_and_create_table_work_time',
        'schedule': crontab(hour='13', minute='47'),  # Каждый день в 19:10
    },
    'check_object_kpi_tables_exist': {
        'task': 'tsa_app.tasks.check_object_kpi_tables_exist',
        'schedule': crontab(hour='13', minute='49'),  # Каждый день в 19:10
    },
    'update-kpi-every-morning': {
        'task': 'tsa_app.tasks.update_kpi',
        'schedule': crontab(hour='13', minute='51'),  # Каждый день в 19:30
    },
    'update-objects-with-materials-lunch-time': {
        'task': 'tsa_app.tasks.update_objects_with_materials',
        'schedule': crontab(hour='13', minute='54'),  # Каждый день в 19:45
    },

}
